{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/michael/coding/tudu/app/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"@babel/polyfill\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport Amplify from \"aws-amplify\";\nimport awsmobile from \"./aws-exports\";\nAmplify.configure(_objectSpread(_objectSpread({}, awsmobile), {}, {\n  Analytics: {\n    disabled: true\n  }\n}));\nimport React, { useEffect } from 'react';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport AuthContext from \"./contexts/AuthContext\";\nvar theme = {\n  dark: true,\n  colors: {\n    primary: '#e0e1dd',\n    background: '#1b263b',\n    card: '#0d1b2a',\n    text: '#a7a7a7',\n    border: 'transparent',\n    notification: '#000000'\n  }\n};\nvar Stack = createStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'LOGIN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'LOGOUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  useEffect(function () {\n    var restoreToken = function restoreToken() {\n      var userToken;\n      return _regeneratorRuntime.async(function restoreToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                userToken = 0;\n              } catch (e) {\n                alert(e);\n              }\n\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    restoreToken();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n\n  if (state.isLoading) {\n    return React.createElement(SplashScreen, null);\n  } else {\n    return React.createElement(AuthContext.Provider, {\n      value: authContext\n    }, React.createElement(NavigationContainer, {\n      theme: theme\n    }, React.createElement(StatusBar, {\n      backgroundColor: theme.colors.background\n    }), React.createElement(Stack.Navigator, null, state.isLoading ? React.createElement(Stack.Screen, {\n      name: \"Splash\",\n      component: SplashScreen\n    }) : state.userToken == null ? React.createElement(Stack.Screen, {\n      name: \"Login\",\n      component: LoginScreen,\n      options: {\n        animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n        headerShown: false\n      }\n    }) : React.createElement(Stack.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }))));\n  }\n}","map":{"version":3,"sources":["/home/michael/coding/tudu/app/App.tsx"],"names":["HomeScreen","SplashScreen","LoginScreen","Amplify","awsmobile","configure","Analytics","disabled","React","useEffect","NavigationContainer","createStackNavigator","AuthContext","theme","dark","colors","primary","background","card","text","border","notification","Stack","App","navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","restoreToken","e","alert","authContext","useMemo","signIn","data","signOut","signUp","animationTypeForReplace","headerShown"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\"; // hacky fix that makes the web verison work\n// import React from 'react';\n// import { StyleSheet, Text, View } from 'react-native';\nimport HomeScreen from \"./screens/HomeScreen\";\n// import DetailsScreen from \"./screens/DetailsScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\n\nimport Amplify from \"aws-amplify\";\nimport awsmobile from \"./aws-exports\";\nAmplify.configure({ ...awsmobile, Analytics: { disabled: true } }); // Note: Disabling analytics was a hacky way of getting warning to disappear\n\nimport React, {useEffect, createContext} from 'react';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { Button, Text, TextInput, View, StatusBar } from \"react-native\";\n\n\nimport AuthContext from \"./contexts/AuthContext\";\n\n// Theming\nconst theme = {\n  dark: true,\n  colors: {\n    primary: '#e0e1dd',\n    background: '#1b263b',\n    card: '#0d1b2a',\n    text: '#a7a7a7',\n    // hintText: '#a8a8a8',\n    // inputText: '#ffffff',\n    border: 'transparent',\n    notification: '#000000'\n  },\n};\n\n// Setup Layout\nconst Stack = createStackNavigator();\n\nexport default function App({ navigation }) {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'LOGIN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'LOGOUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    },\n  );\n  \n\n  // on app start\n  useEffect(() => {\n    const restoreToken = async () => {\n      let userToken;\n      try {\n        userToken = 0;//await AsyncStorage.getItem('auth-token');\n      } catch (e) {\n        // Restoring token failed\n        alert(e);\n      }\n      dispatch({type: 'RESTORE_TOKEN', token: userToken});\n    };\n\n    restoreToken();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async data => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `AsyncStorage`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async data => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `AsyncStorage`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  if (state.isLoading) {\n    return <SplashScreen />;\n  } else {\n    return (\n      <AuthContext.Provider value={authContext}>\n        <NavigationContainer theme={theme}>\n          <StatusBar backgroundColor={theme.colors.background} />\n          <Stack.Navigator>\n            {state.isLoading ? (\n              <Stack.Screen name=\"Splash\" component={SplashScreen} />\n            ) : state.userToken == null ? (\n              <Stack.Screen\n                name=\"Login\"\n                component={LoginScreen}\n                options={{\n                  animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n                  headerShown: false,\n                }}\n              />\n            ) : (\n              // User is signed in\n              <Stack.Screen name=\"Home\" component={HomeScreen} />\n              // <Stack.Screen name=\"Home\" component={SettingsScreen} initialParams={AuthContext} />\n            )}\n          </Stack.Navigator>\n        </NavigationContainer>\n      </AuthContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}